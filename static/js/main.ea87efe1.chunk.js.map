{"version":3,"sources":["componants/Product.js","componants/First.js","componants/Notfound.js","serviceWorker.js","index.js"],"names":["Product","className","to","path","component","Component","First","state","theme","chooseTheme","evt","preventDefault","toLowerCase","setState","this","themeClass","style","position","height","width","display","marginBottom","bsSize","bsStyle","title","Item","eventKey","onSelect","divider","Notfound","Boolean","window","location","hostname","match","Home","lazy","About","Nav","routing","exact","activeStyle","color","fallback","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea87efe1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Link } from 'react-router-dom'  \r\n//const Contacts = ({ match }) => <p>{match.params.id}</p> \r\nclass Product extends Component {  \r\n    render() {  \r\n       return (  \r\n          <div className='Pro'>  \r\n              \r\n             <h1>Welcome to Product Page</h1>  \r\n        <strong>Select contact Id</strong>  \r\n        <ul>  \r\n          <li>  \r\n            <Link to=\"/contact/1\">Contacts 1 </Link>  \r\n          </li>  \r\n          <li>  \r\n            <Link to=\"/contact/2\">Contacts 2 </Link>  \r\n          </li>  \r\n          <li>  \r\n            <Link to=\"/contact/3\">Contacts 3 </Link>  \r\n          </li>  \r\n          <li>  \r\n            <Link to=\"/contact/4\">Contacts 4 </Link>  \r\n          </li>  \r\n        </ul>  \r\n        <Route path=\"/contact/:id\" component={Product} /> \r\n          </div>  \r\n       );  \r\n    }  \r\n }  \r\n \r\n export default Product; ","import React, { Component } from 'react';\r\nimport  './mystyle.css';\r\nimport { SplitButton, Dropdown } from 'react-bootstrap';\r\nclass First extends Component { \r\n   \r\n   state = { theme: null }  \r\n    \r\n  chooseTheme = (theme, evt) => {  \r\n    evt.preventDefault();  \r\n    if (theme.toLowerCase() === 'reset') { theme = null }  \r\n    this.setState({ theme });  \r\n  }  \r\n  render() {  \r\n   const { theme } = this.state;  \r\n   const themeClass = theme ? theme.toLowerCase() : 'default';  \r\n     \r\n   const parentContainerStyles = {  \r\n     position: 'absolute',  \r\n     height: '100%',  \r\n     width: '100%',  \r\n     display: 'table'  \r\n   };  \r\n     \r\n   const subContainerStyles = {  \r\n     position: 'relative',  \r\n     height: '100%',  \r\n     width: '100%',  \r\n     display: 'table-cell',  \r\n   };  \r\n     \r\n   return (  \r\n     <div style={parentContainerStyles}>  \r\n       <div style={subContainerStyles}>  \r\n         \r\n         <span className={`h1 center-block text-center text-${theme ? themeClass : 'muted'}`} style={{ marginBottom: 25 }}>{theme || 'Default'}</span>  \r\n           \r\n         <div className=\"center-block text-center\">  \r\n           <SplitButton bsSize=\"large\" bsStyle={themeClass} title={`${theme || 'Default Block'} Theme`}>  \r\n             <Dropdown.Item eventKey=\"Primary Block\" onSelect={this.chooseTheme}>Primary Theme</Dropdown.Item>  \r\n             <Dropdown.Item eventKey=\"Danger Block\" onSelect={this.chooseTheme}>Danger Theme</Dropdown.Item>  \r\n             <Dropdown.Item eventKey=\"Success Block\" onSelect={this.chooseTheme}>Success Theme</Dropdown.Item>  \r\n             <Dropdown.Item divider />  \r\n             <Dropdown.Item eventKey=\"Reset Block\" onSelect={this.chooseTheme}>Default Theme</Dropdown.Item>  \r\n           </SplitButton>  \r\n         </div>    \r\n       </div>  \r\n     </div>  \r\n   );   \r\n }   \r\n}  \r\n export default First;  ","import React from 'react'  \r\nconst Notfound = () => <h1>Not found</h1>  \r\nexport default Notfound ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","//import React from 'react';\nimport ReactDOM from 'react-dom';  \nimport 'bootstrap/dist/css/bootstrap.min.css'; \nimport { BrowserRouter as Router, Route, Link, NavLink, Switch } from 'react-router-dom'  \nimport React, { Suspense, lazy } from 'react';  \nimport './index.css';\n\n//import About from './componants/About'\nimport Product from './componants/Product'\n//import Nav from './componants/Nav'\nimport First from './componants/First'\nimport Notfound from './componants/Notfound'  \nimport * as serviceWorker from './serviceWorker';\n\nconst Home = lazy(() => import('./App'));  \nconst About = lazy(() => import('./componants/About'));  \nconst Nav = lazy(() => import('./componants/Nav'));\n\n\n\n\n\n\nconst routing = (  \n    <Router>  \n      <div className='Nava'>  \n       \n        <ul>  \n          <li>  \n            <NavLink to=\"/\" exact activeStyle={  \n               {color:'red'}  \n            }>Home</NavLink>  \n          </li>  \n          <li>  \n            <NavLink to=\"/about\" exact activeStyle={  \n               {color:'green'}  \n            }>About</NavLink>  \n          </li>  \n          <li>  \n            <NavLink to=\"/product\" exact activeStyle={  \n               {color:'magenta'}  \n            }>product</NavLink>  \n          </li> \n          <li>  \n            <NavLink to=\"/nav\" exact activeStyle={  \n               {color:'magenta'}  \n            }>Nav</NavLink>  \n          </li>  \n          <li>  \n            <NavLink to=\"/first\" exact activeStyle={  \n               {color:'magenta'}  \n            }>First</NavLink>  \n          </li>  \n        </ul> \n        <Suspense fallback={<div>Loading...</div>}>  \n         <Switch> \n         <Route exact path=\"/\" component={Home} />  \n        <Route path=\"/about\" component={About} />  \n        <Route path=\"/product\" component={Product} /> \n        <Route path=\"/nav\" component={Nav} />\n        <Route path=\"/first\" component={First} />  \n        <Route component={Notfound} />  \n      </Switch>\n      </Suspense>   \n    </div>  \n  </Router>  \n)  \nReactDOM.render(routing, document.getElementById('root')); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}